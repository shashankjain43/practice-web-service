package com.snapdeal.ums.core.entity;

// Generated Sep 2, 2010 6:00:58 PM by Hibernate Tools 3.3.0.GA

import static javax.persistence.GenerationType.IDENTITY;

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import com.snapdeal.base.utils.DateUtils;
import com.snapdeal.ums.core.utils.Constants;
import com.snapdeal.ums.core.utils.QueryNames;

/**
 * EmailSubscriberVerification generated by hbm2java
 */
@Entity
@Table(name = "email_subscriber_detail", catalog = "ums")
@NamedQueries({ @NamedQuery(name = QueryNames.GET_EMAIL_SUBSCRIBER_DETAIL_FROM_EMAIL, query = "from EmailSubscriberDetail where email = :" + QueryNames.QueryParameters.EMAIL) })
public class EmailSubscriberDetail implements java.io.Serializable {

    private static final long serialVersionUID = -8613044583019953756L;

    private Integer           id;
    private String            email;
    private String            code;
    private boolean           verified;
    private String            uid;
    private SubscriberProfile subscriberProfile;
    private Date              updated;
    private Date              created;
    private boolean           junk;
    private String            gender;

    public EmailSubscriberDetail() {
        this.updated = DateUtils.getCurrentTime();
    }

    public EmailSubscriberDetail(String email, String code, boolean verified) {
        this.email = email;
        this.code = code;
        this.verified = verified;
        this.updated = DateUtils.getCurrentTime();
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)
    @Column(name = "id", unique = true, nullable = false)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "email", nullable = false, length = 256)
    public String getEmail() {
        return this.email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    @Column(name = "code", nullable = false, length = 48)
    public String getCode() {
        return this.code;
    }

    public void setCode(String code) {
        this.code = code;
    }

    @Column(name = "verified", nullable = false)
    public boolean isVerified() {
        return this.verified;
    }

    public void setVerified(boolean verified) {
        this.verified = verified;
    }

    public void setUid(String uid) {
        this.uid = uid;
    }

    @Column(name = "uid", nullable = true, length = 32)
    public String getUid() {
        return uid;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "updated", nullable = true, length = 19)
    public Date getUpdated() {
        return this.updated;
    }


    public void setUpdated(Date updated) {
        this.updated = updated;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "subscriber_profile_id")
    public SubscriberProfile getSubscriberProfile() {
        return subscriberProfile;
    }

    public void setSubscriberProfile(SubscriberProfile subscriberProfile) {
        this.subscriberProfile = subscriberProfile;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "created", nullable = false, length = 19)
    public Date getCreated() {
        return this.created;
    }

    public void setCreated(Date created) {
        this.created = created;
    }

    @Column(name = "junk")
    public boolean isJunk() {
        return junk;
    }

    public void setJunk(boolean junk) {
        this.junk = junk;
    }

    @Column(name = "gender", nullable = true, length = 10)
    public String getGender() {
        return gender;
    }

    public void setGender(String gender) {
        this.gender = gender;
    }

    @Transient
    public String getUIDCode() {
        int uniqueNo = Constants.TRANSACTION_CODE_SEQUENCE_START_NO + id;
        int randomNo = (int) (Math.random() * 100);

        // Appending the 2nd digit in the last 
        // Appending the 1st digit in the 5th place
        long temp = (((uniqueNo - (uniqueNo % 1000)) * 10) + (uniqueNo % 1000)) + ((randomNo / 10) * 1000);
        long code = temp * 10 + (randomNo % 10);

        return String.valueOf(code);
    }

}
