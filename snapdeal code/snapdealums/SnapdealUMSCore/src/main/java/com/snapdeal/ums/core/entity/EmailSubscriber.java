package com.snapdeal.ums.core.entity;

// Generated 16 Aug, 2010 10:08:39 PM by Hibernate Tools 3.2.4.GA

import static javax.persistence.GenerationType.IDENTITY;

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.validator.constraints.NotEmpty;

import com.snapdeal.base.utils.StringUtils;
import com.snapdeal.ums.core.utils.QueryNames;

/**
 * EmailSubscriber generated by hbm2java
 */
@Entity
@Table(name = "email_subscriber", catalog = "ums")
@NamedQueries({
        @NamedQuery(name = QueryNames.GET_EMAIL_SUBSCRIBER_FROM_EMAIL, query = "from EmailSubscriber where normalizedEmail = :" + QueryNames.QueryParameters.EMAIL
                + " and zoneId = :" + QueryNames.QueryParameters.ZONE_ID),
        @NamedQuery(name = QueryNames.GET_EMAIL_SUBSCRIBERS_FROM_ZONE, query = "from EmailSubscriber where subscribed = 1 and zone_id = :" + QueryNames.QueryParameters.ZONE_ID
                + " and created >= :" + QueryNames.QueryParameters.STARTTIME + " and created <= :" + QueryNames.QueryParameters.ENDTIME),
        @NamedQuery(name = QueryNames.GET_ALL_EMAIL_SUBSCRIBERS, query = "from EmailSubscriber where subscribed = 1") })
public class EmailSubscriber implements java.io.Serializable {

    /**
     * 
     */
    private static final long    serialVersionUID = 8183173815773274068L;
    private Integer              id;
    private String               email;
    private String               normalizedEmail;
    private int                  zoneId;
    private Boolean              subscribed;
    private Date                 updated;
    private Date                 created;
    private String               subscriptionPage;
    private Boolean              customer         = false;
    private String               reasonUnsubscription;
    private String               suggestionUnsubscription;
    private String               channelCode;
    private String               affiliateTrackingCode;
    private boolean              active           = true;
    private String               preference;
    private EmailServiceProvider emailServiceProvider;
    private boolean              junk;

    public enum Preference {
        DEAL("deal"),
        PRODUCT("product");

        private String name;
        Preference(String name) {
            this.name = name;
        }
        
        public String getName() {
            return name;
        }
        public void setName(String name) {
            this.name = name;
        }
    }
    
    public EmailSubscriber() {
    }

    public EmailSubscriber(String email, int zoneId) {
        this(email, zoneId, true);
    }

    public EmailSubscriber(String email, int zoneId, Boolean subscribed) {
        this.email = email;
        this.zoneId = zoneId;
        this.subscribed = subscribed;
        if (this.email != null) {
            this.normalizedEmail = StringUtils.normalizeEmail(email);
        }
    }

    public EmailSubscriber(EmailSubscriber emailSubscriber) {
        this.email = emailSubscriber.email;
        this.normalizedEmail = emailSubscriber.normalizedEmail;
        this.channelCode = emailSubscriber.channelCode;
        this.customer = emailSubscriber.customer;
        this.active = emailSubscriber.active;
        this.reasonUnsubscription = emailSubscriber.reasonUnsubscription;
        this.suggestionUnsubscription = emailSubscriber.suggestionUnsubscription;
        this.junk = emailSubscriber.junk;
        this.emailServiceProvider = emailSubscriber.emailServiceProvider;
        this.preference = emailSubscriber.preference;
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)
    @Column(name = "id", unique = true, nullable = false)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "email", nullable = false, length = 100)
    @NotEmpty
    public String getEmail() {
        return this.email;
    }

    public void setEmail(String email) {
        this.email = email;
        if (this.email != null) {
            this.normalizedEmail = StringUtils.normalizeEmail(email);
        }
    }

    @Column(name = "normalized_email", nullable = false, length = 100)
    public String getNormalizedEmail() {
        return this.normalizedEmail;
    }

    public void setNormalizedEmail(String normalizedEmail) {
        this.normalizedEmail = normalizedEmail;
    }

    @Column(name = "zone_id", nullable = false)
    public int getZoneId() {
        return this.zoneId;
    }

    public void setZoneId(int zoneId) {
        this.zoneId = zoneId;
    }

    @Column(name = "subscribed")
    public Boolean getSubscribed() {
        return this.subscribed;
    }

    public void setSubscribed(Boolean subscribed) {
        this.subscribed = subscribed;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "created", nullable = false, length = 19)
    public Date getCreated() {
        return this.created;
    }

    public void setCreated(Date created) {
        this.created = created;
    }

    @Column(name = "subscription_page", nullable = true, length = 32)
    public String getSubscriptionPage() {
        return this.subscriptionPage;
    }

    public void setSubscriptionPage(String subscriptionPage) {
        this.subscriptionPage = subscriptionPage;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "updated", nullable = true, length = 19, updatable = false, insertable = false)
    public Date getUpdated() {
        return this.updated;
    }

    public void setUpdated(Date updated) {
        this.updated = updated;
    }

    public void setCustomer(Boolean customer) {
        this.customer = customer;
    }

    @Column(name = "customer")
    public Boolean isCustomer() {
        return customer;
    }

    public void setReasonUnsubscription(String reasonUnsubscription) {
        this.reasonUnsubscription = reasonUnsubscription;
    }

    @Column(name = "reason_unsubscription", nullable = true, length = 256)
    public String getReasonUnsubscription() {
        return this.reasonUnsubscription;
    }

    public void setSuggestionUnsubscription(String suggestionUnsubscription) {
        this.suggestionUnsubscription = suggestionUnsubscription;
    }

    @Column(name = "suggestion_unsubscription", nullable = true, length = 256)
    public String getSuggestionUnsubscription() {
        return this.suggestionUnsubscription;
    }

    public void setChannelCode(String channelCode) {
        this.channelCode = channelCode;
    }

    @Column(name = "channel_code", nullable = true, length = 48)
    public String getChannelCode() {
        return channelCode;
    }

    public void setAffiliateTrackingCode(String affiliateTrackingCode) {
        this.affiliateTrackingCode = affiliateTrackingCode;
    }

    @Column(name = "affiliate_tracking_code", nullable = true, length = 48)
    public String getAffiliateTrackingCode() {
        return affiliateTrackingCode;
    }

    @Column(name = "active")
    public boolean isActive() {
        return active;
    }

    public void setActive(boolean active) {
        this.active = active;
    }

    @Column(name = "junk")
    public boolean isJunk() {
        return junk;
    }

    public void setJunk(boolean junk) {
        this.junk = junk;
    }

    @Column(name = "preference")
    public String getPreference() {
        return preference;
    }

    public void setPreference(String preference) {
        this.preference = preference;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "esp_id", nullable = false)
    public EmailServiceProvider getEmailServiceProvider() {
        return emailServiceProvider;
    }

    public void setEmailServiceProvider(EmailServiceProvider emailServiceProvider) {
        this.emailServiceProvider = emailServiceProvider;
    }

}
