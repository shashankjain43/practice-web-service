package com.snapdeal.ums.core.entity;

// Generated 16 Aug, 2010 10:08:39 PM by Hibernate Tools 3.2.4.GA

import static javax.persistence.GenerationType.IDENTITY;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.CollectionTable;
import javax.persistence.Column;
import javax.persistence.ElementCollection;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import org.hibernate.annotations.CollectionId;
import org.hibernate.annotations.CollectionOfElements;
import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Type;

import com.snapdeal.ums.core.utils.QueryNames;
import com.snapdeal.ums.utils.UMSStringUtils;

/**
 * User generated by hbm2java
 */
@Entity
@Table(name = "user", catalog = "ums")
@NamedQueries({
		@NamedQuery(name = QueryNames.GET_USER_BY_EMAIL, query = "select distinct u from User u left join fetch u.userRoles ur left join fetch ur.role where u.email=:email"),
		@NamedQuery(name = QueryNames.GET_USER_BY_ID, query = "select distinct u from User u left join fetch u.userRoles ur  where u.id=:userid") })
public class User implements java.io.Serializable {

	public static final String TWITTER_REFERRAL_TEXT = "Follow this link to avail exciting deals everyday at Snapdeal";

	/**
     * 
     */
	private static final long serialVersionUID = -3062650442810072242L;
	private Integer id;
	private String email;
	private String password;
	private boolean enabled;
	private boolean emailVerified;
	private boolean mobileVerified;
	private String displayName;
	private String firstName;
	private String middleName;
	private String lastName;
	private String gender;
	private Date birthday;
	private String mobile;
	private String photo;
	private String channelCode;
	private Integer referredBy;
	private int referralCount;
	private String mobileVerificationCode;
	private String emailVerificationCode;
	private SubscriberProfile subscriberProfile;
	private Date created;
	private Date modified;
	private int sdCash;
	private int sdCashEarned;
	private String source;
	private boolean autocreated = false;
	private Set<UserReferral> userReferralses = new HashSet<UserReferral>(0);
	private Set<UserAddress> userAddresses = new HashSet<UserAddress>(0);
	private Set<UserOpenidMapping> userOpenidMappings = new HashSet<UserOpenidMapping>(
			0);
	private Set<UserRole> userRoles = new HashSet<UserRole>(0);
	private Set<UserInformation> userInformations = new HashSet<UserInformation>(
			0);
	private String location;
	private String uid;
	private String friendUids;
	private Integer autocreatedNotificationCount;
	private List<UserBrand> brandPreferences=new ArrayList<UserBrand>();
	//private List<UserBrand> brandPreference=new ArrayList<UserBrand>();

	//private List<String> brandPreferences=new ArrayList<String>();
	public User() {
	}

	public User(User user, String textPassword) {
		this.id = user.getId();
		this.email = user.getEmail();
		this.password = textPassword;
		this.enabled = user.isEnabled();
		this.emailVerified = user.isEmailVerified();
		this.mobileVerified = user.isEmailVerified();
		this.displayName = user.getDisplayName();
		this.firstName = user.getFirstName();
		this.middleName = user.getMiddleName();
		this.lastName = user.getLastName();
		this.gender = user.getGender();
		this.birthday = user.getBirthday();
		this.mobile = user.getMobile();
		this.photo = user.getPhoto();
		this.channelCode = user.getChannelCode();
		this.referredBy = user.getReferredBy();
		this.referralCount = user.getReferralCount();
		this.mobileVerificationCode = user.getMobileVerificationCode();
		this.emailVerificationCode = user.getEmailVerificationCode();
		this.created = user.getCreated();
		this.modified = user.getModified();
		this.sdCash = user.getSdCash();
		this.sdCashEarned = user.getSdCashEarned();
		this.source = user.getSource();
		this.autocreated = user.isAutocreated();
		this.userReferralses = user.getUserReferralses();
		this.userAddresses = user.getUserAddresses();
		this.userOpenidMappings = user.getUserOpenidMappings();
		this.userRoles = user.getUserRoles();
		this.userInformations = user.getUserInformations();
		this.location = user.getLocation();
		this.uid = user.getUid();
		this.friendUids = user.getFriendUids();
		this.autocreatedNotificationCount = 0;
		this.brandPreferences = user.getBrandPreferences();
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@Column(name = "email", nullable = false, length = 256)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = UMSStringUtils.trim(email);
	}

	@Column(name = "password", length = 256)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Column(name = "enabled", nullable = false)
	public boolean isEnabled() {
		return this.enabled;
	}

	public void setEnabled(boolean enabled) {
		this.enabled = enabled;
	}

	@Column(name = "email_verified", nullable = false)
	public boolean isEmailVerified() {
		return this.emailVerified;
	}

	public void setEmailVerified(boolean emailVerified) {
		this.emailVerified = emailVerified;
	}

	@Column(name = "mobile_verified", nullable = false)
	public boolean isMobileVerified() {
		return this.mobileVerified;
	}

	public void setMobileVerified(boolean mobileVerified) {
		this.mobileVerified = mobileVerified;
	}

	@Column(name = "display_name", length = 48)
	public String getDisplayName() {
		return this.displayName;
	}

	public void setDisplayName(String displayName) {
		this.displayName = displayName;
	}

	@Column(name = "first_name", length = 48)
	public String getFirstName() {
		return this.firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	@Column(name = "middle_name", length = 48)
	public String getMiddleName() {
		return this.middleName;
	}

	public void setMiddleName(String middleName) {
		this.middleName = middleName;
	}

	@Column(name = "last_name", length = 48)
	public String getLastName() {
		return this.lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	@Column(name = "gender", length = 2)
	public String getGender() {
		return this.gender;
	}

	public void setGender(String gender) {
		this.gender = gender;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "birthday", length = 10)
	public Date getBirthday() {
		return this.birthday;
	}

	public void setBirthday(Date birthday) {
		this.birthday = birthday;
	}

	@Column(name = "mobile", length = 20)
	public String getMobile() {
		return this.mobile;
	}

	public void setMobile(String mobile) {
		this.mobile = mobile;
	}

	@Column(name = "photo", length = 1024)
	public String getPhoto() {
		return this.photo;
	}

	public void setPhoto(String photo) {
		this.photo = photo;
	}

	@Column(name = "channel_code", length = 48)
	public String getChannelCode() {
		return this.channelCode;
	}

	public void setChannelCode(String channelCode) {
		this.channelCode = channelCode;
	}

	@Column(name = "referred_by")
	public Integer getReferredBy() {
		return this.referredBy;
	}

	public void setReferredBy(Integer referredBy) {
		this.referredBy = referredBy;
	}

	@Column(name = "referral_count", nullable = false)
	public int getReferralCount() {
		return this.referralCount;
	}

	public void setReferralCount(int referralCount) {
		this.referralCount = referralCount;
	}

	@Column(name = "mobile_verification_code", length = 48)
	public String getMobileVerificationCode() {
		return this.mobileVerificationCode;
	}

	public void setMobileVerificationCode(String mobileVerificationCode) {
		this.mobileVerificationCode = mobileVerificationCode;
	}

	@Column(name = "email_verification_code", length = 48)
	public String getEmailVerificationCode() {
		return this.emailVerificationCode;
	}

	public void setEmailVerificationCode(String emailVerificationCode) {
		this.emailVerificationCode = emailVerificationCode;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created", nullable = false, length = 19)
	public Date getCreated() {
		return this.created;
	}

	public void setCreated(Date created) {
		this.created = created;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "modified", nullable = false, length = 19)
	public Date getModified() {
		return this.modified;
	}

	public void setModified(Date modified) {
		this.modified = modified;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<UserReferral> getUserReferralses() {
		return this.userReferralses;
	}

	public void setUserReferralses(Set<UserReferral> userReferralses) {
		this.userReferralses = userReferralses;
	}

	//@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	@Transient
	public Set<UserAddress> getUserAddresses() {
		return this.userAddresses;
	}

	public void setUserAddresses(Set<UserAddress> userAddresses) {
		this.userAddresses = userAddresses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<UserOpenidMapping> getUserOpenidMappings() {
		return this.userOpenidMappings;
	}

	public void setUserOpenidMappings(Set<UserOpenidMapping> userOpenidMappings) {
		this.userOpenidMappings = userOpenidMappings;
	}

	@Column(name = "sd_cash", nullable = false)
	public int getSdCash() {
		return this.sdCash;
	}

	public void setSdCash(int sdCash) {
		this.sdCash = sdCash;
	}

	@Column(name = "sd_cash_earned", nullable = false)
	public int getSdCashEarned() {
		return this.sdCashEarned;
	}

	public void setSdCashEarned(int sdCashEarned) {
		this.sdCashEarned = sdCashEarned;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "user", cascade = CascadeType.ALL)
	public Set<UserRole> getUserRoles() {
		return this.userRoles;
	}

	public void setUserRoles(Set<UserRole> userRoles) {
		this.userRoles = userRoles;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<UserInformation> getUserInformations() {
		return this.userInformations;
	}

	public void setUserInformations(Set<UserInformation> userInformations) {
		this.userInformations = userInformations;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((email == null) ? 0 : email.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		User other = (User) obj;
		if (email == null) {
			if (other.email != null)
				return false;
		} else if (!email.equals(other.email))
			return false;
		return true;
	}

	@Transient
	public UserRole getUserRole(String roleName) {
		for (UserRole role : getUserRoles()) {
			if (role.getRole().getCode().equals(roleName)) {
				return role;
			}
		}
		return null;
	}

	@Transient
	public String getFbReferralUrl() {
		return new StringBuilder().append("/invite/").append(getId())
				.append("/facebook").toString();
	}

	@Transient
	public String getTwitterReferralText() {
		return TWITTER_REFERRAL_TEXT.replaceAll("\\s", "+").replaceAll("\'",
				"+");
	}

	public void setSource(String source) {
		this.source = source;
	}

	@Column(name = "source")
	public String getSource() {
		return source;
	}

	@Column(name = "autocreated", nullable = false)
	public boolean isAutocreated() {
		return autocreated;
	}

	public void setAutocreated(boolean autocreated) {
		this.autocreated = autocreated;
	}

	@Column(name = "location")
	public void setLocation(String location) {
		this.location = location;
	}

	public String getLocation() {
		return location;
	}

	@Column(name = "uid")
	public String getUid() {
		return uid;
	}

	public void setUid(String uid) {
		this.uid = uid;
	}

	@Column(name = "friend_uids")
	public String getFriendUids() {
		return friendUids;
	}

	public void setFriendUids(String friendUids) {
		this.friendUids = friendUids;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "subscriber_profile_id")
	public SubscriberProfile getSubscriberProfile() {
		return subscriberProfile;
	}

	public void setSubscriberProfile(SubscriberProfile subscriberProfile) {
		this.subscriberProfile = subscriberProfile;
	}

	/**
	 * @return the autocreatedNotificationCount
	 */
	@Column(name = "autocreated_notification_count")
	public Integer getAutocreatedNotificationCount() {
		return autocreatedNotificationCount;
	}

	/**
	 * @param autocreatedNotificationCount
	 *            the autocreatedNotificationCount to set
	 */
	public void setAutocreatedNotificationCount(
			Integer autocreatedNotificationCount) {
		this.autocreatedNotificationCount = autocreatedNotificationCount;
	}

@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
public List<UserBrand> getBrandPreferences() {
		return brandPreferences;
}

	public void setBrandPreferences(List<UserBrand> brandPreferences) {
	this.brandPreferences = brandPreferences;
	}

//	@CollectionOfElements(fetch=FetchType.EAGER)
//	@JoinTable(name="user_brand_preference", joinColumns=@JoinColumn(name="user_id"))
//	public List<String> getBrandPreferences() {
//		return brandPreferences;
//	}
//
//	public void setBrandPreferences(List<String> brandPreferences) {
//		this.brandPreferences = brandPreferences;
//	}
//	
//	
	
	
}