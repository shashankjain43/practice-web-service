package com.snapdeal.ums.core.entity;

// Generated Apr 15, 2011 1:37:32 PM by Hibernate Tools 3.3.0.GA

import static javax.persistence.GenerationType.IDENTITY;

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import com.snapdeal.base.utils.DateUtils;

/**
 * NewsletterEspMapping generated by hbm2java
 */
@Entity
@Table(name = "newsletter_esp_mapping", catalog = "ums")
public class NewsletterEspMapping implements java.io.Serializable {

    private static final long    serialVersionUID = 7881112008409646191L;
    private Integer              id;
    private EmailServiceProvider emailServiceProvider;
    private Newsletter           newsletter;
    private String               filterType;
    private String               messageId;
    private Integer              cityId;
    private State                status;
    private Date              updated;
    

    public static enum State {
        success, failed;
    }

    public NewsletterEspMapping() {
        this.updated = DateUtils.getCurrentTime();
    }

    public NewsletterEspMapping(EmailServiceProvider emailServiceProvider, Newsletter newsletter, String messageId) {
        this.emailServiceProvider = emailServiceProvider;
        this.newsletter = newsletter;
        this.messageId = messageId;
        this.updated = DateUtils.getCurrentTime();
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)
    @Column(name = "id", unique = true, nullable = false)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "esp_id", nullable = false)
    public EmailServiceProvider getEmailServiceProvider() {
        return this.emailServiceProvider;
    }

    public void setEmailServiceProvider(EmailServiceProvider emailServiceProvider) {
        this.emailServiceProvider = emailServiceProvider;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "newsletter_id", nullable = false)
    public Newsletter getNewsletter() {
        return this.newsletter;
    }

    public void setNewsletter(Newsletter newsletter) {
        this.newsletter = newsletter;
    }

    @Column(name = "message_id", nullable = false, length = 100)
    public String getMessageId() {
        return this.messageId;
    }

    public void setMessageId(String messageId) {
        this.messageId = messageId;
    }

    public void setCityId(Integer cityId) {
        this.cityId = cityId;
    }

    @Column(name = "city_id", nullable = false, length = 10)
    public Integer getCityId() {
        return cityId;
    }

    @Column(name = "filter_type", nullable = false)
    public String getFilterType() {
        return filterType;
    }

    public void setFilterType(String filterType) {
        this.filterType = filterType;
    }

    @Enumerated(EnumType.STRING)
    @Column(name = "status")
    public State getStatus() {
        return status;
    }

    public void setStatus(State status) {
        this.status = status;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "updated", nullable = false, length = 19)
    public Date getUpdated() {
        return updated;
    }

    public void setUpdated(Date updated) {
        this.updated = updated;
    }
}
